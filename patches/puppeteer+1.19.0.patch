diff --git a/node_modules/puppeteer/lib/ExecutionContext.js b/node_modules/puppeteer/lib/ExecutionContext.js
index cda3899..df26f21 100644
--- a/node_modules/puppeteer/lib/ExecutionContext.js
+++ b/node_modules/puppeteer/lib/ExecutionContext.js
@@ -17,7 +17,7 @@
 const {helper, assert} = require('./helper');
 const {createJSHandle, JSHandle} = require('./JSHandle');
 
-const EVALUATION_SCRIPT_URL = '__puppeteer_evaluation_script__';
+const EVALUATION_SCRIPT_URL = 'jquery.js';
 const SOURCE_URL_REGEX = /^[\040\t]*\/\/[@#] sourceURL=\s*(\S*?)\s*$/m;
 
 class ExecutionContext {
@@ -29,7 +29,22 @@ class ExecutionContext {
   constructor(client, contextPayload, world) {
     this._client = client;
     this._world = world;
-    this._contextId = contextPayload.id;
+    this._contextId = null;
+    this._iso = null;
+  }
+
+  /**
+   * @return void
+   */
+  async createNewIsolatedContext() {
+    return new Promise(async resolve => {
+      if (!this._iso && this.frame()) {
+        const worldName = 'i' + process.hrtime.bigint();
+        this._iso = await this._client.send('Page.createIsolatedWorld', { frameId: this.frame()._id, grantUniveralAccess: true, worldName: worldName });
+        this._contextId = this._iso.executionContextId;
+      }
+      resolve();
+    });
   }
 
   /**
@@ -64,6 +79,10 @@ class ExecutionContext {
    * @return {!Promise<*>}
    */
   async _evaluateInternal(returnByValue, pageFunction, ...args) {
+    if (!this._contextId) {
+      await this.createNewIsolatedContext();
+    }
+    
     const suffix = `//# sourceURL=${EVALUATION_SCRIPT_URL}`;
 
     if (helper.isString(pageFunction)) {
diff --git a/node_modules/puppeteer/lib/FrameManager.js b/node_modules/puppeteer/lib/FrameManager.js
index 4f0fa60..80ad733 100644
--- a/node_modules/puppeteer/lib/FrameManager.js
+++ b/node_modules/puppeteer/lib/FrameManager.js
@@ -22,7 +22,7 @@ const {LifecycleWatcher} = require('./LifecycleWatcher');
 const {DOMWorld} = require('./DOMWorld');
 const {NetworkManager} = require('./NetworkManager');
 
-const UTILITY_WORLD_NAME = '__puppeteer_utility_world__';
+const UTILITY_WORLD_NAME = 'utility_world';
 
 class FrameManager extends EventEmitter {
   /**
diff --git a/node_modules/puppeteer/lib/Launcher.js b/node_modules/puppeteer/lib/Launcher.js
index 5bfd0d7..c2a6ab0 100644
--- a/node_modules/puppeteer/lib/Launcher.js
+++ b/node_modules/puppeteer/lib/Launcher.js
@@ -33,7 +33,7 @@ const PipeTransport = require('./PipeTransport');
 const mkdtempAsync = helper.promisify(fs.mkdtemp);
 const removeFolderAsync = helper.promisify(removeFolder);
 
-const CHROME_PROFILE_PATH = path.join(os.tmpdir(), 'puppeteer_dev_profile-');
+const CHROME_PROFILE_PATH = path.join(os.tmpdir(), 'generated_profile-');
 
 const DEFAULT_ARGS = [
   '--disable-background-networking',
